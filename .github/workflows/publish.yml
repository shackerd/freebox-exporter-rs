name: Tests and release

on:
  push:
    branches:
      - "main"
      - "feature/publish"
    tags-ignore:
      - "freebox-export-rs-*"
  pull_request:

env:
  CRATE_NAME: freebox-export-rs
  GITHUB_TOKEN: ${{ github.token }}
  RUST_BACKTRACE: 1

jobs:
  test:
    name: ${{ matrix.platform.os_name }} with rust ${{ matrix.toolchain }}
    permissions: write-all
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          # Platforms that don't work:
          #
          # - sparc64-unknown-linux-gnu - cannot compile openssl-sys
          # - x86_64-unknown-illumos - weird error compiling openssl - "bin/sh: 1: granlib: not found"

          # - os_name: FreeBSD-x86_64
          #   os: ubuntu-20.04
          #   target: x86_64-unknown-freebsd
          #   bin: freebox-exporter-rs
          #   name: freebox-exporter-rs-FreeBSD-x86_64.tar.gz
          #   skip_tests: true
          - os_name: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: freebox-exporter-rs
            name: freebox-exporter-rs-Linux-x86_64-musl.tar.gz
          - os_name: Linux-aarch64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            bin: freebox-exporter-rs
            name: freebox-exporter-rs-Linux-aarch64-musl.tar.gz
            skip_tests: true
          - os_name: Linux-arm
            os: ubuntu-20.04
            target: arm-unknown-linux-musleabi
            bin: freebox-exporter-rs
            name: freebox-exporter-rs-Linux-arm-musl.tar.gz
            skip_tests: true
          - os_name: Linux-i686
            os: ubuntu-20.04
            target: i686-unknown-linux-musl
            bin: freebox-exporter-rs
            name: freebox-exporter-rs-Linux-i686-musl.tar.gz
            skip_tests: true
          # - os_name: Linux-powerpc
          #   os: ubuntu-20.04
          #   target: powerpc-unknown-linux-gnu
          #   bin: freebox-exporter-rs
          #   name: freebox-exporter-rs-Linux-powerpc-gnu.tar.gz
          #   skip_tests: true
          # - os_name: Linux-powerpc64
          #   os: ubuntu-20.04
          #   target: powerpc64-unknown-linux-gnu
          #   bin: freebox-exporter-rs
          #   name: freebox-exporter-rs-Linux-powerpc64-gnu.tar.gz
          #   skip_tests: true
          # - os_name: Linux-powerpc64le
          #   os: ubuntu-20.04
          #   target: powerpc64le-unknown-linux-gnu
          #   bin: freebox-exporter-rs
          #   name: freebox-exporter-rs-Linux-powerpc64le.tar.gz
          #   skip_tests: true
          # - os_name: Linux-riscv64
          #   os: ubuntu-20.04
          #   target: riscv64gc-unknown-linux-gnu
          #   bin: freebox-exporter-rs
          #   name: freebox-exporter-rs-Linux-riscv64gc-gnu.tar.gz
          # - os_name: Linux-s390x
          #   os: ubuntu-20.04
          #   target: s390x-unknown-linux-gnu
          #   bin: freebox-exporter-rs
          #   name: freebox-exporter-rs-Linux-s390x-gnu.tar.gz
          #   skip_tests: true
          # - os_name: NetBSD-x86_64
          #   os: ubuntu-20.04
          #   target: x86_64-unknown-netbsd
          #   bin: freebox-exporter-rs
          #   name: freebox-exporter-rs-NetBSD-x86_64.tar.gz
          #   skip_tests: true
          # - os_name: Windows-aarch64
          #   os: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   bin: freebox-exporter-rs.exe
          #   name: freebox-exporter-rs-Windows-aarch64.zip
          #   skip_tests: true
          # - os_name: Windows-i686
          #   os: windows-latest
          #   target: i686-pc-windows-msvc
          #   bin: freebox-exporter-rs.exe
          #   name: freebox-exporter-rs-Windows-i686.zip
          #   skip_tests: true
          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: freebox-exporter-rs.exe
            name: freebox-exporter-rs-Windows-x86_64.zip
          - os_name: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: freebox-exporter-rs
            name: freebox-exporter-rs-Darwin-x86_64.tar.gz
          - os_name: macOS-aarch64
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: freebox-exporter-rs
            name: freebox-exporter-rs-Darwin-aarch64.tar.gz
            skip_tests: true
        toolchain:
          - stable
          # - beta
          # - nightly
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo & target directories
        uses: Swatinem/rust-cache@v2
      - name: Configure Git
        run: |
          git config --global user.email "jdoe@example.com"
          git config --global user.name "J. Doe"
      - name: Install musl-tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes musl-tools
        if: contains(matrix.platform.name, 'musl')
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "build"
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args: "--locked --release"
          strip: true
      - name: mockoon-cli
        uses: mockoon/cli-action@v2.0.0
        with:
            version: latest
            data-file: src/api-mock.json
            port: 3001
      - name: Run tests
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "test"
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args: "--locked --release"
        if: ${{ !matrix.platform.skip_tests }}
      - name: Package as archive
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
          else
            tar czvf ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
          fi
          cd -
        if: |
          matrix.toolchain == 'stable' &&
          ( startsWith( github.ref, 'refs/tags/v' ) ||
            github.ref == 'refs/tags/test-release' )
      - name: Publish release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: freebox-exporter-rs-${{ matrix.platform.os_name }}
          path: "freebox-exporter-rs-*"
        if: matrix.toolchain == 'stable' && github.ref == 'refs/tags/test-release'
      - name: Generate SHA-256
        run: shasum -a 256 ${{ matrix.platform.name }}
        if: |
          matrix.toolchain == 'stable' &&
          matrix.platform.os == 'macOS-latest' &&
          ( startsWith( github.ref, 'refs/tags/v' ) ||
            github.ref == 'refs/tags/test-release' )
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          files: "freebox-exporter-rs-*"
          # body_path: Changes.md
        if: matrix.toolchain == 'stable' && startsWith( github.ref, 'refs/tags/v' )
      - name: Docker Login
        # You may pin to the exact commit or the version.
        # uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        uses: docker/login-action@v3.3.0
        with:
          # Server address of Docker registry. If not set then will default to Docker Hub
          registry: docker.io
          # Username used to log against the Docker registry
          username: ${{ github.actor }} 
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.DOCKER_PAT }}
          # Specifies whether the given registry is ECR (auto, true or false)
          ecr: auto
          # Log out from the Docker registry at the end of a job
          logout: true
          if: matrix.toolchain == 'stable' && startsWith( github.ref, 'refs/tags/v' )
      - name: Build and push Docker images
        # You may pin to the exact commit or the version.
        # uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75
        uses: docker/build-push-action@v6.9.0
        with:         
          # List of build-time variables
          #build-args: # optional
          # List of additional build contexts (e.g., name=path)
          #build-contexts: # optional
          # Builder instance
          #builder: # optional
          # List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)
          #cache-from: # optional
          # List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)
          #cache-to: # optional
          # Optional parent cgroup for the container used in the build
          #cgroup-parent: # optional
          # Build's context is the set of files located in the specified PATH or URL
          #context: # optional
          # Path to the Dockerfile
          file: ContainerFile # optional
          # List of metadata for an image
          #labels: # optional
          # Load is a shorthand for --output=type=docker
          #load: # optional, default is false
          # Set the networking mode for the RUN instructions during build
          #network: # optional
          # Do not use cache when building the image
          #no-cache: # optional, default is false
          # Do not cache specified stages
          #no-cache-filters: # optional
          # List of output destinations (format: type=local,dest=path)
          #outputs: # optional
          # List of target platforms for build
          #platforms: # optional
          # Generate provenance attestation for the build (shorthand for --attest=type=provenance)
          #provenance: # optional
          # Always attempt to pull all referenced images
          #pull: # optional, default is false
          # Push is a shorthand for --output=type=registry
          push: true
          # Generate SBOM attestation for the build (shorthand for --attest=type=sbom)
          #sbom: # optional
          # List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
          #secrets: # optional
          # List of secret env vars to expose to the build (e.g., key=envname, MY_SECRET=MY_ENV_VAR)
          #secret-envs: # optional
          # List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)
          #secret-files: # optional
          # Size of /dev/shm (e.g., 2g)
          #shm-size: # optional
          # List of SSH agent socket or keys to expose to the build
          #ssh: # optional
          # List of tags
          tags: latest
          # Sets the target stage to build
          #target: # optional
          # Ulimit options (e.g., nofile=1024:1024)
          #ulimit: # optional
          # GitHub Token used to authenticate against a repository for Git context
          #github-token: # optional, default is ${{ github.token }}
          if: matrix.toolchain == 'stable' && startsWith( github.ref, 'refs/tags/v' )
